Building Caffe2 in: /home/ivankobzarev/github/pytorch/build
-- std::exception_ptr is supported.
-- Turning off deprecation warning due to glog.
-- Current compiler supports avx2 extension. Will build perfkernels.
-- Current compiler supports avx512f extension. Will build fbgemm.
-- Building using own protobuf under third_party per request.
-- Use custom protobuf build.
-- 
-- 3.13.0.0
-- Caffe2 protobuf include directory: $<BUILD_INTERFACE:/home/ivankobzarev/github/pytorch/third_party/protobuf/src>$<INSTALL_INTERFACE:include>
-- Trying to find preferred BLAS backend of choice: MKL
-- MKL_THREADING = OMP
-- MKL libraries: /home/ivankobzarev/anaconda3/lib/libmkl_intel_lp64.so;/home/ivankobzarev/anaconda3/lib/libmkl_gnu_thread.so;/home/ivankobzarev/anaconda3/lib/libmkl_core.so;-fopenmp;/usr/lib64/libpthread.so;/usr/lib64/libm.so;/usr/lib64/libdl.so
-- MKL include directory: /home/ivankobzarev/anaconda3/include
-- MKL OpenMP type: GNU
-- MKL OpenMP library: -fopenmp
-- Brace yourself, we are building NNPACK
-- NNPACK backend is x86-64
-- LLVM FileCheck Found: /bin/FileCheck
-- git version: v1.5.5 normalized to 1.5.5
-- Version: 1.5.5
-- Performing Test HAVE_STD_REGEX -- success
-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
-- Performing Test HAVE_POSIX_REGEX -- success
-- Performing Test HAVE_STEADY_CLOCK -- success
-- Found OpenMP_C: -fopenmp  
-- Found OpenMP_CXX: -fopenmp  
-- Found OpenMP: TRUE   
-- Using third party subdirectory Eigen.
-- Setting Python's include dir to /home/ivankobzarev/anaconda3/include/python3.8 from sysconfig
-- Setting Python's library to /home/ivankobzarev/anaconda3/lib/python3.8
-- Found PythonInterp: /home/ivankobzarev/anaconda3/bin/python (found suitable version "3.8.3", minimum required is "3.0") 
-- Found PythonLibs: /home/ivankobzarev/anaconda3/lib/python3.8 (found suitable version "3.8.3", minimum required is "3.0") 
-- NumPy ver. 1.19.4 found (include: /home/ivankobzarev/anaconda3/lib/python3.8/site-packages/numpy/core/include)
-- Using third_party/pybind11.
-- pybind11 include dirs: /home/ivankobzarev/github/pytorch/cmake/../third_party/pybind11/include
-- Adding OpenMP CXX_FLAGS: -fopenmp
-- Will link against OpenMP libraries: /usr/lib/gcc/x86_64-redhat-linux/8/libgomp.so;/usr/lib64/libpthread.so
-- Looking for LLVM in /home/ivankobzarev/llvm90install
-- Found LLVM 13.0.0git
-- Using LLVMConfig.cmake in: /home/ivankobzarev/llvm90install/lib/cmake/llvm
-- Gloo build as SHARED library
-- summary of build options:
    Install prefix:  /usr/local
    Target system:   Linux
    Compiler:
      C compiler:    /home/ivankobzarev/ccache/lib/cc
      CFLAGS:          -fopenmp

-- Found PythonInterp: /home/ivankobzarev/anaconda3/bin/python (found version "3.8.3") 
-- Found PythonLibs: /home/ivankobzarev/anaconda3/lib/python3.8 (found version "3.8.3") 
-- 
-- ******** Summary ********
--   CMake version             : 3.18.2
--   CMake command             : /home/ivankobzarev/anaconda3/bin/cmake
--   System                    : Linux
--   C++ compiler              : /home/ivankobzarev/ccache/lib/c++
--   C++ compiler version      : 8.5.0
--   CXX flags                 :  -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -Wnon-virtual-dtor
--   Build type                : Release
--   Compile definitions       : TH_BLAS_MKL;TORCH_ENABLE_LLVM;ONNX_ML=1;ONNXIFI_ENABLE_EXT=1
--   CMAKE_PREFIX_PATH         : 
--   CMAKE_INSTALL_PREFIX      : /usr/local
--   CMAKE_MODULE_PATH         : /home/ivankobzarev/github/pytorch/cmake/Modules
-- 
--   ONNX version              : 1.8.204
--   ONNX NAMESPACE            : onnx_torch
--   ONNX_USE_LITE_PROTO       : OFF
--   USE_PROTOBUF_SHARED_LIBS  : OFF
--   ONNX_DISABLE_EXCEPTIONS   : OFF
--   ONNX_WERROR               : OFF
--   ONNX_BUILD_TESTS          : OFF
--   ONNX_BUILD_BENCHMARKS     : OFF
--   ONNXIFI_DUMMY_BACKEND     : OFF
--   ONNXIFI_ENABLE_EXT        : OFF
-- 
--   Protobuf compiler         : 
--   Protobuf includes         : 
--   Protobuf libraries        : 
--   BUILD_ONNX_PYTHON         : OFF
-- 
-- ******** Summary ********
--   CMake version         : 3.18.2
--   CMake command         : /home/ivankobzarev/anaconda3/bin/cmake
--   System                : Linux
--   C++ compiler          : /home/ivankobzarev/ccache/lib/c++
--   C++ compiler version  : 8.5.0
--   CXX flags             :  -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -Wnon-virtual-dtor
--   Build type            : Release
--   Compile definitions   : TH_BLAS_MKL;TORCH_ENABLE_LLVM;ONNX_ML=1;ONNXIFI_ENABLE_EXT=1
--   CMAKE_PREFIX_PATH     : 
--   CMAKE_INSTALL_PREFIX  : /usr/local
--   CMAKE_MODULE_PATH     : /home/ivankobzarev/github/pytorch/cmake/Modules
-- 
--   ONNX version          : 1.4.1
--   ONNX NAMESPACE        : onnx_torch
--   ONNX_BUILD_TESTS      : OFF
--   ONNX_BUILD_BENCHMARKS : OFF
--   ONNX_USE_LITE_PROTO   : OFF
--   ONNXIFI_DUMMY_BACKEND : OFF
-- 
--   Protobuf compiler     : 
--   Protobuf includes     : 
--   Protobuf libraries    : 
--   BUILD_ONNX_PYTHON     : OFF
-- Could not find CUDA with FP16 support, compiling without torch.CudaHalfTensor
-- Adding -DNDEBUG to compile flags
-- MAGMA not found. Compiling without MAGMA support
-- Could not find hardware support for NEON on this machine.
-- No OMAP3 processor on this machine.
-- No OMAP4 processor on this machine.
-- AVX compiler support found
-- AVX2 compiler support found
-- Found a library with LAPACK API (mkl).
-- USE_CUDNN is set to 0. Compiling without cuDNN support
-- MIOpen not found. Compiling without MIOpen support
-- MKLDNN_CPU_RUNTIME = OMP
-- Primitive cache is enabled
-- Found MKL-DNN: TRUE
-- Version: 7.0.3
-- Build type: Release
-- CXX_STANDARD: 14
-- Required features: cxx_variadic_templates
-- Using CPU-only version of Kineto
-- Configuring Kineto dependency:
--   KINETO_SOURCE_DIR = /home/ivankobzarev/github/pytorch/third_party/kineto/libkineto
--   KINETO_BUILD_TESTS = OFF
--   KINETO_LIBRARY_TYPE = static
-- Kineto: FMT_SOURCE_DIR = /home/ivankobzarev/github/pytorch/third_party/fmt
-- Kineto: FMT_INCLUDE_DIR = /home/ivankobzarev/github/pytorch/third_party/fmt/include
-- Configured Kineto (CPU)
-- GCC 8.5.0: Adding gcc and gcc_s libs to link line
-- don't use NUMA
-- Using ATen parallel backend: OMP
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- Configuring build for SLEEF-v3.6.0
-- Using option `-Wall -Wno-unused -Wno-attributes -Wno-unused-result -Wno-psabi -ffp-contract=off -fno-math-errno -fno-trapping-math` to compile libsleef
-- Building shared libs : OFF
-- Building static test bins: OFF
-- MPFR : /home/ivankobzarev/anaconda3/lib/libmpfr.so
-- MPFR header file in /home/ivankobzarev/anaconda3/include
-- GMP : /home/ivankobzarev/anaconda3/lib/libgmp.so
-- RT : /usr/lib64/librt.so
-- FFTW3 : LIBFFTW3-NOTFOUND
-- OPENSSL : 1.1.1g
-- SDE : SDE_COMMAND-NOTFOUND
-- RUNNING_ON_TRAVIS : 
-- COMPILER_SUPPORTS_OPENMP : 1
-- NCCL operators skipped due to no CUDA support
-- Excluding FakeLowP operators
-- Including IDEEP operators
-- Excluding image processing operators due to no opencv
-- Excluding video processing operators due to no opencv
-- MPI operators skipped due to no MPI support
-- Include Observer library
-- /home/ivankobzarev/ccache/lib/c++ /home/ivankobzarev/github/pytorch/torch/abi-check.cpp -o /home/ivankobzarev/github/pytorch/build/abi-check
-- Determined _GLIBCXX_USE_CXX11_ABI=1
-- pytorch is compiling with OpenMP. 
OpenMP CXX_FLAGS: -fopenmp. 
OpenMP libraries: /usr/lib/gcc/x86_64-redhat-linux/8/libgomp.so;/usr/lib64/libpthread.so.
-- Caffe2 is compiling with OpenMP. 
OpenMP CXX_FLAGS: -fopenmp. 
OpenMP libraries: /usr/lib/gcc/x86_64-redhat-linux/8/libgomp.so;/usr/lib64/libpthread.so.
-- Using lib/python3.8/site-packages as python relative installation path
-- 
-- ******** Summary ********
-- General:
--   CMake version         : 3.18.2
--   CMake command         : /home/ivankobzarev/anaconda3/bin/cmake
--   System                : Linux
--   C++ compiler          : /home/ivankobzarev/ccache/lib/c++
--   C++ compiler id       : GNU
--   C++ compiler version  : 8.5.0
--   Using ccache if found : ON
--   Found ccache          : /bin/ccache
--   CXX flags             :  -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow
--   Build type            : Release
--   Compile definitions   : TH_BLAS_MKL;TORCH_ENABLE_LLVM;ONNX_ML=1;ONNXIFI_ENABLE_EXT=1;ONNX_NAMESPACE=onnx_torch;IDEEP_USE_MKL;HAVE_MMAP=1;_FILE_OFFSET_BITS=64;HAVE_SHM_OPEN=1;HAVE_SHM_UNLINK=1;HAVE_MALLOC_USABLE_SIZE=1;USE_EXTERNAL_MZCRC;MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS
--   CMAKE_PREFIX_PATH     : 
--   CMAKE_INSTALL_PREFIX  : /usr/local
--   USE_GOLD_LINKER       : OFF
-- 
--   TORCH_VERSION         : 1.10.0
--   CAFFE2_VERSION        : 1.10.0
--   BUILD_CAFFE2          : ON
--   BUILD_CAFFE2_OPS      : ON
--   BUILD_CAFFE2_MOBILE   : OFF
--   BUILD_STATIC_RUNTIME_BENCHMARK: OFF
--   BUILD_TENSOREXPR_BENCHMARK: OFF
--   BUILD_BINARY          : ON
--   BUILD_CUSTOM_PROTOBUF : ON
--     Link local protobuf : ON
--   BUILD_DOCS            : OFF
--   BUILD_PYTHON          : ON
--     Python version      : 3.8.3
--     Python executable   : /home/ivankobzarev/anaconda3/bin/python
--     Pythonlibs version  : 3.8.3
--     Python library      : /home/ivankobzarev/anaconda3/lib/python3.8
--     Python includes     : /home/ivankobzarev/anaconda3/include/python3.8
--     Python site-packages: lib/python3.8/site-packages
--   BUILD_SHARED_LIBS     : ON
--   CAFFE2_USE_MSVC_STATIC_RUNTIME     : OFF
--   BUILD_TEST            : ON
--   BUILD_JNI             : OFF
--   BUILD_MOBILE_AUTOGRAD : OFF
--   BUILD_LITE_INTERPRETER: OFF
--   INTERN_BUILD_MOBILE   : 
--   USE_BLAS              : 1
--     BLAS                : mkl
--   USE_LAPACK            : 1
--     LAPACK              : mkl
--   USE_ASAN              : OFF
--   USE_CPP_CODE_COVERAGE : OFF
--   USE_CUDA              : OFF
--   USE_ROCM              : OFF
--   USE_EIGEN_FOR_BLAS    : 
--   USE_FBGEMM            : ON
--     USE_FAKELOWP          : OFF
--   USE_KINETO            : ON
--   USE_FFMPEG            : OFF
--   USE_GFLAGS            : OFF
--   USE_GLOG              : OFF
--   USE_LEVELDB           : OFF
--   USE_LITE_PROTO        : OFF
--   USE_LMDB              : OFF
--   USE_METAL             : OFF
--   USE_PYTORCH_METAL     : OFF
--   USE_PYTORCH_METAL_EXPORT     : OFF
--   USE_FFTW              : OFF
--   USE_MKL               : ON
--   USE_MKLDNN            : ON
--   USE_MKLDNN_ACL        : OFF
--   USE_MKLDNN_CBLAS      : OFF
--   USE_NCCL              : OFF
--   USE_NNPACK            : ON
--   USE_NUMPY             : ON
--   USE_OBSERVERS         : ON
--   USE_OPENCL            : OFF
--   USE_OPENCV            : OFF
--   USE_OPENMP            : ON
--   USE_TBB               : OFF
--   USE_VULKAN            : OFF
--   USE_PROF              : OFF
--   USE_QNNPACK           : ON
--   USE_PYTORCH_QNNPACK   : ON
--   USE_REDIS             : OFF
--   USE_ROCKSDB           : OFF
--   USE_ZMQ               : OFF
--   USE_DISTRIBUTED       : ON
--     USE_MPI               : OFF
--     USE_GLOO              : ON
--     USE_GLOO_WITH_OPENSSL : OFF
--     USE_TENSORPIPE        : ON
--   USE_DEPLOY           : OFF
--   USE_BREAKPAD         : ON
--   Public Dependencies  : Threads::Threads;caffe2::mkl;caffe2::mkldnn
--   Private Dependencies : pthreadpool;cpuinfo;qnnpack;pytorch_qnnpack;nnpack;XNNPACK;fbgemm;fp16;gloo;tensorpipe;aten_op_header_gen;foxi_loader;rt;fmt::fmt-header-only;kineto;gcc_s;gcc;dl
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ivankobzarev/github/pytorch/build
[1/25] Building CXX object caffe2/CMakeFiles/torch.dir/__/empty.cpp.o
[2/25] Building CXX object caffe2/CMakeFiles/torch_cpu.dir/__/torch/csrc/jit/tensorexpr/kernel.cpp.o
[3/25] Linking CXX shared library lib/libtorch_cpu.so
[4/25] Linking CXX shared library lib/libtorch.so
[5/25] Linking CXX executable bin/example_allreduce
[6/25] Linking CXX executable bin/FileStoreTest
[7/25] Linking CXX executable bin/HashStoreTest
[8/25] Linking CXX executable bin/ProcessGroupGlooTest
[9/25] Linking CXX executable bin/TCPStoreTest
[10/25] Linking CXX shared library lib/libshm.so
[11/25] Linking CXX shared library lib/libjitbackend_test.so
[12/25] Linking CXX shared library lib/libbackend_with_compiler.so
[13/25] Linking CXX shared library lib/libtorchbind_test.so
[14/25] Linking CXX executable bin/test_dist_autograd
[15/25] Linking CXX executable bin/test_mobile_nnc
[16/25] Linking CXX executable bin/test_cpp_rpc
[17/25] Linking CXX executable bin/parallel_benchmark
[18/25] Linking CXX executable bin/tutorial_tensorexpr
[19/25] Linking CXX executable bin/torch_shm_manager
[20/25] Linking CXX executable bin/test_tensorexpr
[21/25] Linking CXX executable bin/test_jit
[22/25] Linking CXX executable bin/test_api
[23/25] Linking CXX shared library lib/libtorch_python.so
[24/25] Linking CXX shared library lib/libnnapi_backend.so
[25/25] Linking CXX shared library lib/libcaffe2_detectron_ops.so
XXX_GRAPH after shape propagation:
graph(%x.1 : Float(1, 3, 224, 224, strides=[150528, 50176, 224, 1], requires_grad=0, device=cpu)):
  %2 : int[] = prim::Constant[value=[0, 0]]()
  %3 : int[] = prim::Constant[value=[1, 1]]()
  %4 : int[] = prim::Constant[value=[2, 2]]()
  %5 : int = prim::Constant[value=-1]()
  %6 : int = prim::Constant[value=1]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:178:29
  %7 : int = prim::Constant[value=960]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %8 : int = prim::Constant[value=672]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %9 : int = prim::Constant[value=480]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %10 : int = prim::Constant[value=184]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %11 : int = prim::Constant[value=200]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %12 : int = prim::Constant[value=240]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %13 : int = prim::Constant[value=120]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %15 : int = prim::Constant[value=72]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %16 : int = prim::Constant[value=64]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %17 : int = prim::Constant[value=16]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %self.classifier.3.bias : Float(1000, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.3.weight : Float(1000, 1280, strides=[1280, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.0.bias : Float(1280, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.0.weight : Float(1280, 960, strides=[960, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc2.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc2.weight : Float(960, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc1.weight : Float(240, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc2.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc2.weight : Float(960, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc1.weight : Float(240, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc2.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc2.weight : Float(672, 168, 1, 1, strides=[168, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc1.bias : Float(168, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc1.weight : Float(168, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc2.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc2.weight : Float(672, 168, 1, 1, strides=[168, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc1.bias : Float(168, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc1.weight : Float(168, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc2.bias : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc2.weight : Float(480, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc1.weight : Float(120, 480, 1, 1, strides=[480, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc2.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc2.weight : Float(120, 32, 1, 1, strides=[32, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc1.bias : Float(32, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc1.weight : Float(32, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc2.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc2.weight : Float(120, 32, 1, 1, strides=[32, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc1.bias : Float(32, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc1.weight : Float(32, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc2.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc2.weight : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc1.bias : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc1.weight : Float(24, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.weight_fused_bn : Float(16, 3, 3, 3, strides=[27, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.1 : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.9 : Tensor(1, 16, 112, 112) = aten::conv2d(%x.1, %self.features.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.1, %4, %3, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %293 : Tensor(1, 16, 112, 112) = aten::hardswish(%input0.9) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.1.block.0.0.weight_fused_bn : Float(16, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.3 : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.11 : Tensor(1, 16, 112, 112) = aten::conv2d(%293, %self.features.1.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.3, %3, %3, %3, %17) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %296 : Tensor(1, 16, 112, 112) = aten::relu(%input0.11) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.1.block.1.0.weight_fused_bn : Float(16, 16, 1, 1, strides=[16, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.5 : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.15 : Tensor(1, 16, 112, 112) = aten::conv2d(%296, %self.features.1.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.5, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %299 : Tensor(1, 16, 112, 112) = aten::add(%input0.15, %293, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.2.block.0.0.weight_fused_bn : Float(64, 16, 1, 1, strides=[16, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.7 : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.17 : Tensor(1, 64, 112, 112) = aten::conv2d(%299, %self.features.2.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.7, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %302 : Tensor(1, 64, 112, 112) = aten::relu(%input0.17) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.2.block.1.0.weight_fused_bn : Float(64, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.9 : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.21 : Tensor(1, 64, 56, 56) = aten::conv2d(%302, %self.features.2.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.9, %4, %3, %3, %16) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %305 : Tensor(1, 64, 56, 56) = aten::relu(%input0.21) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.2.block.2.0.weight_fused_bn : Float(24, 64, 1, 1, strides=[64, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.11 : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.23 : Tensor(1, 24, 56, 56) = aten::conv2d(%305, %self.features.2.block.2.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.11, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %self.features.3.block.0.0.weight_fused_bn : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.13 : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.25 : Tensor(1, 72, 56, 56) = aten::conv2d(%input0.23, %self.features.3.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.13, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %310 : Tensor(1, 72, 56, 56) = aten::relu(%input0.25) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.3.block.1.0.weight_fused_bn : Float(72, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.15 : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.29 : Tensor(1, 72, 56, 56) = aten::conv2d(%310, %self.features.3.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.15, %3, %3, %3, %15) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %313 : Tensor(1, 72, 56, 56) = aten::relu(%input0.29) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.3.block.2.0.weight_fused_bn : Float(24, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.17 : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.31 : Tensor(1, 24, 56, 56) = aten::conv2d(%313, %self.features.3.block.2.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.17, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %316 : Tensor(1, 24, 56, 56) = aten::add(%input0.31, %input0.23, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.4.block.0.0.weight_fused_bn : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.19 : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.33 : Tensor(1, 72, 56, 56) = aten::conv2d(%316, %self.features.4.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.19, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %319 : Tensor(1, 72, 56, 56) = aten::relu(%input0.33) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.4.block.1.0.weight_fused_bn : Float(72, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.21 : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.37 : Tensor(1, 72, 28, 28) = aten::conv2d(%319, %self.features.4.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.21, %4, %4, %3, %15) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %322 : Tensor(1, 72, 28, 28) = aten::relu(%input0.37) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale.2 : Tensor(1, 72, 1, 1) = aten::adaptive_avg_pool2d(%322, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.2 : Tensor(1, 24, 1, 1) = aten::conv2d(%scale.2, %self.features.4.block.2.fc1.weight, %self.features.4.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %328 : Tensor(1, 24, 1, 1) = aten::relu(%scale0.2) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.2 : Tensor(1, 72, 1, 1) = aten::conv2d(%328, %self.features.4.block.2.fc2.weight, %self.features.4.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %330 : Tensor(1, 72, 1, 1) = aten::hardsigmoid(%scale2.2) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.6 : Tensor(1, 72, 28, 28) = aten::mul(%330, %322) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.4.block.3.0.weight_fused_bn : Float(40, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.23 : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.39 : Tensor(1, 40, 28, 28) = aten::conv2d(%input2.6, %self.features.4.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.23, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %self.features.5.block.0.0.weight_fused_bn : Float(120, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.25 : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.41 : Tensor(1, 120, 28, 28) = aten::conv2d(%input0.39, %self.features.5.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.25, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %336 : Tensor(1, 120, 28, 28) = aten::relu(%input0.41) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.5.block.1.0.weight_fused_bn : Float(120, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.27 : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.45 : Tensor(1, 120, 28, 28) = aten::conv2d(%336, %self.features.5.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.27, %3, %4, %3, %13) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %339 : Tensor(1, 120, 28, 28) = aten::relu(%input0.45) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale.4 : Tensor(1, 120, 1, 1) = aten::adaptive_avg_pool2d(%339, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.4 : Tensor(1, 32, 1, 1) = aten::conv2d(%scale.4, %self.features.5.block.2.fc1.weight, %self.features.5.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %345 : Tensor(1, 32, 1, 1) = aten::relu(%scale0.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.4 : Tensor(1, 120, 1, 1) = aten::conv2d(%345, %self.features.5.block.2.fc2.weight, %self.features.5.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %347 : Tensor(1, 120, 1, 1) = aten::hardsigmoid(%scale2.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.8 : Tensor(1, 120, 28, 28) = aten::mul(%347, %339) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.5.block.3.0.weight_fused_bn : Float(40, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.29 : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.47 : Tensor(1, 40, 28, 28) = aten::conv2d(%input2.8, %self.features.5.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.29, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %351 : Tensor(1, 40, 28, 28) = aten::add(%input0.47, %input0.39, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.6.block.0.0.weight_fused_bn : Float(120, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.31 : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.49 : Tensor(1, 120, 28, 28) = aten::conv2d(%351, %self.features.6.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.31, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %354 : Tensor(1, 120, 28, 28) = aten::relu(%input0.49) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %self.features.6.block.1.0.weight_fused_bn : Float(120, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.33 : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.53 : Tensor(1, 120, 28, 28) = aten::conv2d(%354, %self.features.6.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.33, %3, %4, %3, %13) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %357 : Tensor(1, 120, 28, 28) = aten::relu(%input0.53) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale.6 : Tensor(1, 120, 1, 1) = aten::adaptive_avg_pool2d(%357, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.6 : Tensor(1, 32, 1, 1) = aten::conv2d(%scale.6, %self.features.6.block.2.fc1.weight, %self.features.6.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %363 : Tensor(1, 32, 1, 1) = aten::relu(%scale0.6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.6 : Tensor(1, 120, 1, 1) = aten::conv2d(%363, %self.features.6.block.2.fc2.weight, %self.features.6.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %365 : Tensor(1, 120, 1, 1) = aten::hardsigmoid(%scale2.6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.10 : Tensor(1, 120, 28, 28) = aten::mul(%365, %357) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.6.block.3.0.weight_fused_bn : Float(40, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.35 : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.55 : Tensor(1, 40, 28, 28) = aten::conv2d(%input2.10, %self.features.6.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.35, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %369 : Tensor(1, 40, 28, 28) = aten::add(%input0.55, %351, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.7.block.0.0.weight_fused_bn : Float(240, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.37 : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.57 : Tensor(1, 240, 28, 28) = aten::conv2d(%369, %self.features.7.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.37, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %372 : Tensor(1, 240, 28, 28) = aten::hardswish(%input0.57) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.7.block.1.0.weight_fused_bn : Float(240, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.39 : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.61 : Tensor(1, 240, 14, 14) = aten::conv2d(%372, %self.features.7.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.39, %4, %3, %3, %12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %375 : Tensor(1, 240, 14, 14) = aten::hardswish(%input0.61) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.7.block.2.0.weight_fused_bn : Float(80, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.41 : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.63 : Tensor(1, 80, 14, 14) = aten::conv2d(%375, %self.features.7.block.2.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.41, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %self.features.8.block.0.0.weight_fused_bn : Float(200, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.43 : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.65 : Tensor(1, 200, 14, 14) = aten::conv2d(%input0.63, %self.features.8.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.43, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %380 : Tensor(1, 200, 14, 14) = aten::hardswish(%input0.65) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.8.block.1.0.weight_fused_bn : Float(200, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.45 : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.69 : Tensor(1, 200, 14, 14) = aten::conv2d(%380, %self.features.8.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.45, %3, %3, %3, %11) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %383 : Tensor(1, 200, 14, 14) = aten::hardswish(%input0.69) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.8.block.2.0.weight_fused_bn : Float(80, 200, 1, 1, strides=[200, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.47 : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.71 : Tensor(1, 80, 14, 14) = aten::conv2d(%383, %self.features.8.block.2.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.47, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %386 : Tensor(1, 80, 14, 14) = aten::add(%input0.71, %input0.63, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.9.block.0.0.weight_fused_bn : Float(184, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.49 : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.73 : Tensor(1, 184, 14, 14) = aten::conv2d(%386, %self.features.9.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.49, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %389 : Tensor(1, 184, 14, 14) = aten::hardswish(%input0.73) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.9.block.1.0.weight_fused_bn : Float(184, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.51 : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.77 : Tensor(1, 184, 14, 14) = aten::conv2d(%389, %self.features.9.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.51, %3, %3, %3, %10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %392 : Tensor(1, 184, 14, 14) = aten::hardswish(%input0.77) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.9.block.2.0.weight_fused_bn : Float(80, 184, 1, 1, strides=[184, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.53 : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.79 : Tensor(1, 80, 14, 14) = aten::conv2d(%392, %self.features.9.block.2.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.53, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %395 : Tensor(1, 80, 14, 14) = aten::add(%input0.79, %386, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.10.block.0.0.weight_fused_bn : Float(184, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.55 : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.81 : Tensor(1, 184, 14, 14) = aten::conv2d(%395, %self.features.10.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.55, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %398 : Tensor(1, 184, 14, 14) = aten::hardswish(%input0.81) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.10.block.1.0.weight_fused_bn : Float(184, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.57 : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.85 : Tensor(1, 184, 14, 14) = aten::conv2d(%398, %self.features.10.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.57, %3, %3, %3, %10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %401 : Tensor(1, 184, 14, 14) = aten::hardswish(%input0.85) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.10.block.2.0.weight_fused_bn : Float(80, 184, 1, 1, strides=[184, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.59 : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.87 : Tensor(1, 80, 14, 14) = aten::conv2d(%401, %self.features.10.block.2.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.59, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %404 : Tensor(1, 80, 14, 14) = aten::add(%input0.87, %395, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.11.block.0.0.weight_fused_bn : Float(480, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.61 : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.89 : Tensor(1, 480, 14, 14) = aten::conv2d(%404, %self.features.11.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.61, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %407 : Tensor(1, 480, 14, 14) = aten::hardswish(%input0.89) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.11.block.1.0.weight_fused_bn : Float(480, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.63 : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.93 : Tensor(1, 480, 14, 14) = aten::conv2d(%407, %self.features.11.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.63, %3, %3, %3, %9) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %410 : Tensor(1, 480, 14, 14) = aten::hardswish(%input0.93) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.8 : Tensor(1, 480, 1, 1) = aten::adaptive_avg_pool2d(%410, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.8 : Tensor(1, 120, 1, 1) = aten::conv2d(%scale.8, %self.features.11.block.2.fc1.weight, %self.features.11.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %416 : Tensor(1, 120, 1, 1) = aten::relu(%scale0.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.8 : Tensor(1, 480, 1, 1) = aten::conv2d(%416, %self.features.11.block.2.fc2.weight, %self.features.11.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %418 : Tensor(1, 480, 1, 1) = aten::hardsigmoid(%scale2.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.12 : Tensor(1, 480, 14, 14) = aten::mul(%418, %410) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.11.block.3.0.weight_fused_bn : Float(112, 480, 1, 1, strides=[480, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.65 : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.95 : Tensor(1, 112, 14, 14) = aten::conv2d(%input2.12, %self.features.11.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.65, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %self.features.12.block.0.0.weight_fused_bn : Float(672, 112, 1, 1, strides=[112, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.67 : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.97 : Tensor(1, 672, 14, 14) = aten::conv2d(%input0.95, %self.features.12.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.67, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %424 : Tensor(1, 672, 14, 14) = aten::hardswish(%input0.97) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.12.block.1.0.weight_fused_bn : Float(672, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.69 : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.101 : Tensor(1, 672, 14, 14) = aten::conv2d(%424, %self.features.12.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.69, %3, %3, %3, %8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %427 : Tensor(1, 672, 14, 14) = aten::hardswish(%input0.101) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.10 : Tensor(1, 672, 1, 1) = aten::adaptive_avg_pool2d(%427, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.10 : Tensor(1, 168, 1, 1) = aten::conv2d(%scale.10, %self.features.12.block.2.fc1.weight, %self.features.12.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %433 : Tensor(1, 168, 1, 1) = aten::relu(%scale0.10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.10 : Tensor(1, 672, 1, 1) = aten::conv2d(%433, %self.features.12.block.2.fc2.weight, %self.features.12.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %435 : Tensor(1, 672, 1, 1) = aten::hardsigmoid(%scale2.10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.14 : Tensor(1, 672, 14, 14) = aten::mul(%435, %427) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.12.block.3.0.weight_fused_bn : Float(112, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.71 : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.103 : Tensor(1, 112, 14, 14) = aten::conv2d(%input2.14, %self.features.12.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.71, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %439 : Tensor(1, 112, 14, 14) = aten::add(%input0.103, %input0.95, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.13.block.0.0.weight_fused_bn : Float(672, 112, 1, 1, strides=[112, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.73 : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.105 : Tensor(1, 672, 14, 14) = aten::conv2d(%439, %self.features.13.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.73, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %442 : Tensor(1, 672, 14, 14) = aten::hardswish(%input0.105) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.13.block.1.0.weight_fused_bn : Float(672, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.75 : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.109 : Tensor(1, 672, 7, 7) = aten::conv2d(%442, %self.features.13.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.75, %4, %4, %3, %8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %445 : Tensor(1, 672, 7, 7) = aten::hardswish(%input0.109) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.12 : Tensor(1, 672, 1, 1) = aten::adaptive_avg_pool2d(%445, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.12 : Tensor(1, 168, 1, 1) = aten::conv2d(%scale.12, %self.features.13.block.2.fc1.weight, %self.features.13.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %451 : Tensor(1, 168, 1, 1) = aten::relu(%scale0.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.12 : Tensor(1, 672, 1, 1) = aten::conv2d(%451, %self.features.13.block.2.fc2.weight, %self.features.13.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %453 : Tensor(1, 672, 1, 1) = aten::hardsigmoid(%scale2.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.16 : Tensor(1, 672, 7, 7) = aten::mul(%453, %445) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.13.block.3.0.weight_fused_bn : Float(160, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.77 : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.111 : Tensor(1, 160, 7, 7) = aten::conv2d(%input2.16, %self.features.13.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.77, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %self.features.14.block.0.0.weight_fused_bn : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.79 : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.113 : Tensor(1, 960, 7, 7) = aten::conv2d(%input0.111, %self.features.14.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.79, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %459 : Tensor(1, 960, 7, 7) = aten::hardswish(%input0.113) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.14.block.1.0.weight_fused_bn : Float(960, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.81 : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.117 : Tensor(1, 960, 7, 7) = aten::conv2d(%459, %self.features.14.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.81, %3, %4, %3, %7) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %462 : Tensor(1, 960, 7, 7) = aten::hardswish(%input0.117) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.14 : Tensor(1, 960, 1, 1) = aten::adaptive_avg_pool2d(%462, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.14 : Tensor(1, 240, 1, 1) = aten::conv2d(%scale.14, %self.features.14.block.2.fc1.weight, %self.features.14.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %468 : Tensor(1, 240, 1, 1) = aten::relu(%scale0.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.14 : Tensor(1, 960, 1, 1) = aten::conv2d(%468, %self.features.14.block.2.fc2.weight, %self.features.14.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %470 : Tensor(1, 960, 1, 1) = aten::hardsigmoid(%scale2.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.18 : Tensor(1, 960, 7, 7) = aten::mul(%470, %462) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.14.block.3.0.weight_fused_bn : Float(160, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.83 : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.119 : Tensor(1, 160, 7, 7) = aten::conv2d(%input2.18, %self.features.14.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.83, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %474 : Tensor(1, 160, 7, 7) = aten::add(%input0.119, %input0.111, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.15.block.0.0.weight_fused_bn : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.85 : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.6 : Tensor(1, 960, 7, 7) = aten::conv2d(%474, %self.features.15.block.0.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.85, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %477 : Tensor(1, 960, 7, 7) = aten::hardswish(%input0.6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %self.features.15.block.1.0.weight_fused_bn : Float(960, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.87 : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.8 : Tensor(1, 960, 7, 7) = aten::conv2d(%477, %self.features.15.block.1.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.87, %3, %4, %3, %7) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %480 : Tensor(1, 960, 7, 7) = aten::hardswish(%input0.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.1 : Tensor(1, 960, 1, 1) = aten::adaptive_avg_pool2d(%480, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.1 : Tensor(1, 240, 1, 1) = aten::conv2d(%scale.1, %self.features.15.block.2.fc1.weight, %self.features.15.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %486 : Tensor(1, 240, 1, 1) = aten::relu(%scale0.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.1 : Tensor(1, 960, 1, 1) = aten::conv2d(%486, %self.features.15.block.2.fc2.weight, %self.features.15.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %488 : Tensor(1, 960, 1, 1) = aten::hardsigmoid(%scale2.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.2 : Tensor(1, 960, 7, 7) = aten::mul(%488, %480) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %self.features.15.block.3.0.weight_fused_bn : Float(160, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn.89 : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.121 : Tensor(1, 160, 7, 7) = aten::conv2d(%input2.2, %self.features.15.block.3.0.weight_fused_bn, %self.features.0.0.bias_fused_bn.89, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %492 : Tensor(1, 160, 7, 7) = aten::add(%input0.121, %474, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %self.features.16.0.weight_fused_bn : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.0.bias_fused_bn : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.3 : Tensor(1, 960, 7, 7) = aten::conv2d(%492, %self.features.16.0.weight_fused_bn, %self.features.0.0.bias_fused_bn, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %495 : Tensor(1, 960, 7, 7) = aten::hardswish(%input0.3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %x1.1 : Tensor(1, 960, 1, 1) = aten::adaptive_avg_pool2d(%495, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %x2.1 : Tensor(1, 960) = aten::flatten(%x1.1, %6, %5) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:178:12
  %input0.1 : Tensor(1, 1280) = aten::linear(%x2.1, %self.classifier.0.weight, %self.classifier.0.bias) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1847:11
  %502 : Tensor(1, 1280) = aten::hardswish(%input0.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %504 : Tensor(1, 1000) = aten::linear(%502, %self.classifier.3.weight, %self.classifier.3.bias) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1847:11
  return (%504)

graph(%x.1 : Tensor):
  %2 : int[] = prim::Constant[value=[0, 0]]()
  %3 : int[] = prim::Constant[value=[1, 1]]()
  %4 : int[] = prim::Constant[value=[2, 2]]()
  %5 : int = prim::Constant[value=-1]()
  %6 : int = prim::Constant[value=1]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:178:29
  %7 : int = prim::Constant[value=960]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %8 : int = prim::Constant[value=672]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %9 : int = prim::Constant[value=480]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %10 : int = prim::Constant[value=184]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %11 : int = prim::Constant[value=200]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %12 : int = prim::Constant[value=240]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %13 : int = prim::Constant[value=120]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %14 : str = prim::Constant[value="AssertionError: "]() # :0:0
  %15 : int = prim::Constant[value=72]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %16 : int = prim::Constant[value=64]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %17 : int = prim::Constant[value=16]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %18 : int = prim::Constant[value=2]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:45
  %19 : float = prim::Constant[value=0.001]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:178:12
  %20 : float = prim::Constant[value=0.01]() # :0:0
  %21 : float = prim::Constant[value=0.20000000000000001]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/dropout.py:58:32
  %self.classifier.3.bias : Float(1000, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.3.weight : Float(1000, 1280, strides=[1280, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.0.bias : Float(1280, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.0.weight : Float(1280, 960, strides=[960, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.0.weight : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.bias : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.weight : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.running_var : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.running_mean : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.0.weight : Float(160, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc2.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc2.weight : Float(960, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc1.weight : Float(240, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.0.weight : Float(960, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.0.weight : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.bias : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.weight : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.running_var : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.running_mean : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.0.weight : Float(160, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc2.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc2.weight : Float(960, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc1.weight : Float(240, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.0.weight : Float(960, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.0.weight : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.bias : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.weight : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.running_var : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.running_mean : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.0.weight : Float(160, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc2.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc2.weight : Float(672, 168, 1, 1, strides=[168, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc1.bias : Float(168, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc1.weight : Float(168, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.0.weight : Float(672, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.0.weight : Float(672, 112, 1, 1, strides=[112, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.bias : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.weight : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.running_var : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.running_mean : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.0.weight : Float(112, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc2.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc2.weight : Float(672, 168, 1, 1, strides=[168, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc1.bias : Float(168, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc1.weight : Float(168, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.0.weight : Float(672, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.0.weight : Float(672, 112, 1, 1, strides=[112, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.bias : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.weight : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.running_var : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.running_mean : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.0.weight : Float(112, 480, 1, 1, strides=[480, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc2.bias : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc2.weight : Float(480, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc1.weight : Float(120, 480, 1, 1, strides=[480, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.bias : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.weight : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.running_var : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.running_mean : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.0.weight : Float(480, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.bias : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.weight : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.running_var : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.running_mean : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.0.weight : Float(480, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.0.weight : Float(80, 184, 1, 1, strides=[184, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.0.weight : Float(184, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.0.weight : Float(184, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.0.weight : Float(80, 184, 1, 1, strides=[184, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.0.weight : Float(184, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.0.weight : Float(184, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.0.weight : Float(80, 200, 1, 1, strides=[200, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.bias : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.weight : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.running_var : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.running_mean : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.0.weight : Float(200, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.bias : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.weight : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.running_var : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.running_mean : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.0.weight : Float(200, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.0.weight : Float(80, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.weight : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.running_var : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.running_mean : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.0.weight : Float(240, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.weight : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.running_var : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.running_mean : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.0.weight : Float(240, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.bias : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.weight : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.running_var : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.running_mean : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.0.weight : Float(40, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc2.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc2.weight : Float(120, 32, 1, 1, strides=[32, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc1.bias : Float(32, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc1.weight : Float(32, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.0.weight : Float(120, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.0.weight : Float(120, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.bias : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.weight : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.running_var : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.running_mean : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.0.weight : Float(40, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc2.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc2.weight : Float(120, 32, 1, 1, strides=[32, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc1.bias : Float(32, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc1.weight : Float(32, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.0.weight : Float(120, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.0.weight : Float(120, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.bias : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.weight : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.running_var : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.running_mean : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.0.weight : Float(40, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc2.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc2.weight : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc1.bias : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc1.weight : Float(24, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.0.weight : Float(72, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.0.weight : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.bias : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.weight : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.running_var : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.running_mean : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.0.weight : Float(24, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.0.weight : Float(72, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.0.weight : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.bias : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.weight : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.running_var : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.running_mean : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.0.weight : Float(24, 64, 1, 1, strides=[64, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.bias : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.weight : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.running_var : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.running_mean : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.0.weight : Float(64, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.bias : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.weight : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.running_var : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.running_mean : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.0.weight : Float(64, 16, 1, 1, strides=[16, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.use_res_connect : bool = prim::Constant[value=1]()
  %self.features.1.block.1.1.bias : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.1.weight : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.1.running_var : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.1.running_mean : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.0.weight : Float(16, 16, 1, 1, strides=[16, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.bias : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.weight : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.running_var : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.running_mean : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.0.weight : Float(16, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.bias : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.weight : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.running_var : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.running_mean : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.training : bool = prim::Constant[value=0]()
  %self.features.0.0.bias : NoneType = prim::Constant()
  %self.features.0.0.weight : Float(16, 3, 3, 3, strides=[27, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.9 : Tensor = aten::conv2d(%x.1, %self.features.0.0.weight, %self.features.0.0.bias, %4, %3, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.92 : Tensor = aten::batch_norm(%input0.9, %self.features.0.1.weight, %self.features.0.1.bias, %self.features.0.1.running_mean, %self.features.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %293 : Tensor = aten::hardswish(%input1.92) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.11 : Tensor = aten::conv2d(%293, %self.features.1.block.0.0.weight, %self.features.0.0.bias, %3, %3, %3, %17) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.12 : Tensor = aten::batch_norm(%input0.11, %self.features.1.block.0.1.weight, %self.features.1.block.0.1.bias, %self.features.1.block.0.1.running_mean, %self.features.1.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %296 : Tensor = aten::relu(%input1.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.15 : Tensor = aten::conv2d(%296, %self.features.1.block.1.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.2 : Tensor = aten::batch_norm(%input0.15, %self.features.1.block.1.1.weight, %self.features.1.block.1.1.bias, %self.features.1.block.1.1.running_mean, %self.features.1.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %299 : Tensor = aten::add(%result.2, %293, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.17 : Tensor = aten::conv2d(%299, %self.features.2.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.14 : Tensor = aten::batch_norm(%input0.17, %self.features.2.block.0.1.weight, %self.features.2.block.0.1.bias, %self.features.2.block.0.1.running_mean, %self.features.2.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %302 : Tensor = aten::relu(%input1.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.21 : Tensor = aten::conv2d(%302, %self.features.2.block.1.0.weight, %self.features.0.0.bias, %4, %3, %3, %16) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.16 : Tensor = aten::batch_norm(%input0.21, %self.features.2.block.1.1.weight, %self.features.2.block.1.1.bias, %self.features.2.block.1.1.running_mean, %self.features.2.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %305 : Tensor = aten::relu(%input1.16) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.23 : Tensor = aten::conv2d(%305, %self.features.2.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.4 : Tensor = aten::batch_norm(%input0.23, %self.features.2.block.2.1.weight, %self.features.2.block.2.1.bias, %self.features.2.block.2.1.running_mean, %self.features.2.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.25 : Tensor = aten::conv2d(%result.4, %self.features.3.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.20 : Tensor = aten::batch_norm(%input0.25, %self.features.3.block.0.1.weight, %self.features.3.block.0.1.bias, %self.features.3.block.0.1.running_mean, %self.features.3.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %310 : Tensor = aten::relu(%input1.20) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.29 : Tensor = aten::conv2d(%310, %self.features.3.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %15) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.22 : Tensor = aten::batch_norm(%input0.29, %self.features.3.block.1.1.weight, %self.features.3.block.1.1.bias, %self.features.3.block.1.1.running_mean, %self.features.3.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %313 : Tensor = aten::relu(%input1.22) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.31 : Tensor = aten::conv2d(%313, %self.features.3.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.6 : Tensor = aten::batch_norm(%input0.31, %self.features.3.block.2.1.weight, %self.features.3.block.2.1.bias, %self.features.3.block.2.1.running_mean, %self.features.3.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %316 : Tensor = aten::add(%result.6, %result.4, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.33 : Tensor = aten::conv2d(%316, %self.features.4.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.26 : Tensor = aten::batch_norm(%input0.33, %self.features.4.block.0.1.weight, %self.features.4.block.0.1.bias, %self.features.4.block.0.1.running_mean, %self.features.4.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %319 : Tensor = aten::relu(%input1.26) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.37 : Tensor = aten::conv2d(%319, %self.features.4.block.1.0.weight, %self.features.0.0.bias, %4, %4, %3, %15) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.28 : Tensor = aten::batch_norm(%input0.37, %self.features.4.block.1.1.weight, %self.features.4.block.1.1.bias, %self.features.4.block.1.1.running_mean, %self.features.4.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %322 : Tensor = aten::relu(%input1.28) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %323 : int[] = aten::size(%322) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %324 : int = aten::len(%323) # <string>:5:9
  %325 : bool = aten::gt(%324, %18) # <string>:5:9
   = prim::If(%325) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.2 : Tensor = aten::adaptive_avg_pool2d(%322, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.2 : Tensor = aten::conv2d(%scale.2, %self.features.4.block.2.fc1.weight, %self.features.4.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %328 : Tensor = aten::relu(%scale0.2) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.2 : Tensor = aten::conv2d(%328, %self.features.4.block.2.fc2.weight, %self.features.4.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %330 : Tensor = aten::hardsigmoid(%scale2.2) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.6 : Tensor = aten::mul(%330, %322) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.39 : Tensor = aten::conv2d(%input2.6, %self.features.4.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.8 : Tensor = aten::batch_norm(%input0.39, %self.features.4.block.3.1.weight, %self.features.4.block.3.1.bias, %self.features.4.block.3.1.running_mean, %self.features.4.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.41 : Tensor = aten::conv2d(%result.8, %self.features.5.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.32 : Tensor = aten::batch_norm(%input0.41, %self.features.5.block.0.1.weight, %self.features.5.block.0.1.bias, %self.features.5.block.0.1.running_mean, %self.features.5.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %336 : Tensor = aten::relu(%input1.32) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.45 : Tensor = aten::conv2d(%336, %self.features.5.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %13) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.34 : Tensor = aten::batch_norm(%input0.45, %self.features.5.block.1.1.weight, %self.features.5.block.1.1.bias, %self.features.5.block.1.1.running_mean, %self.features.5.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %339 : Tensor = aten::relu(%input1.34) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %340 : int[] = aten::size(%339) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %341 : int = aten::len(%340) # <string>:5:9
  %342 : bool = aten::gt(%341, %18) # <string>:5:9
   = prim::If(%342) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.4 : Tensor = aten::adaptive_avg_pool2d(%339, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.4 : Tensor = aten::conv2d(%scale.4, %self.features.5.block.2.fc1.weight, %self.features.5.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %345 : Tensor = aten::relu(%scale0.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.4 : Tensor = aten::conv2d(%345, %self.features.5.block.2.fc2.weight, %self.features.5.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %347 : Tensor = aten::hardsigmoid(%scale2.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.8 : Tensor = aten::mul(%347, %339) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.47 : Tensor = aten::conv2d(%input2.8, %self.features.5.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.10 : Tensor = aten::batch_norm(%input0.47, %self.features.5.block.3.1.weight, %self.features.5.block.3.1.bias, %self.features.5.block.3.1.running_mean, %self.features.5.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %351 : Tensor = aten::add(%result.10, %result.8, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.49 : Tensor = aten::conv2d(%351, %self.features.6.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.38 : Tensor = aten::batch_norm(%input0.49, %self.features.6.block.0.1.weight, %self.features.6.block.0.1.bias, %self.features.6.block.0.1.running_mean, %self.features.6.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %354 : Tensor = aten::relu(%input1.38) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.53 : Tensor = aten::conv2d(%354, %self.features.6.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %13) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.40 : Tensor = aten::batch_norm(%input0.53, %self.features.6.block.1.1.weight, %self.features.6.block.1.1.bias, %self.features.6.block.1.1.running_mean, %self.features.6.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %357 : Tensor = aten::relu(%input1.40) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %358 : int[] = aten::size(%357) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %359 : int = aten::len(%358) # <string>:5:9
  %360 : bool = aten::gt(%359, %18) # <string>:5:9
   = prim::If(%360) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.6 : Tensor = aten::adaptive_avg_pool2d(%357, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.6 : Tensor = aten::conv2d(%scale.6, %self.features.6.block.2.fc1.weight, %self.features.6.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %363 : Tensor = aten::relu(%scale0.6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.6 : Tensor = aten::conv2d(%363, %self.features.6.block.2.fc2.weight, %self.features.6.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %365 : Tensor = aten::hardsigmoid(%scale2.6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.10 : Tensor = aten::mul(%365, %357) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.55 : Tensor = aten::conv2d(%input2.10, %self.features.6.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.12 : Tensor = aten::batch_norm(%input0.55, %self.features.6.block.3.1.weight, %self.features.6.block.3.1.bias, %self.features.6.block.3.1.running_mean, %self.features.6.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %369 : Tensor = aten::add(%result.12, %351, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.57 : Tensor = aten::conv2d(%369, %self.features.7.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.44 : Tensor = aten::batch_norm(%input0.57, %self.features.7.block.0.1.weight, %self.features.7.block.0.1.bias, %self.features.7.block.0.1.running_mean, %self.features.7.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %372 : Tensor = aten::hardswish(%input1.44) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.61 : Tensor = aten::conv2d(%372, %self.features.7.block.1.0.weight, %self.features.0.0.bias, %4, %3, %3, %12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.46 : Tensor = aten::batch_norm(%input0.61, %self.features.7.block.1.1.weight, %self.features.7.block.1.1.bias, %self.features.7.block.1.1.running_mean, %self.features.7.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %375 : Tensor = aten::hardswish(%input1.46) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.63 : Tensor = aten::conv2d(%375, %self.features.7.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.14 : Tensor = aten::batch_norm(%input0.63, %self.features.7.block.2.1.weight, %self.features.7.block.2.1.bias, %self.features.7.block.2.1.running_mean, %self.features.7.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.65 : Tensor = aten::conv2d(%result.14, %self.features.8.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.50 : Tensor = aten::batch_norm(%input0.65, %self.features.8.block.0.1.weight, %self.features.8.block.0.1.bias, %self.features.8.block.0.1.running_mean, %self.features.8.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %380 : Tensor = aten::hardswish(%input1.50) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.69 : Tensor = aten::conv2d(%380, %self.features.8.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %11) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.52 : Tensor = aten::batch_norm(%input0.69, %self.features.8.block.1.1.weight, %self.features.8.block.1.1.bias, %self.features.8.block.1.1.running_mean, %self.features.8.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %383 : Tensor = aten::hardswish(%input1.52) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.71 : Tensor = aten::conv2d(%383, %self.features.8.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.16 : Tensor = aten::batch_norm(%input0.71, %self.features.8.block.2.1.weight, %self.features.8.block.2.1.bias, %self.features.8.block.2.1.running_mean, %self.features.8.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %386 : Tensor = aten::add(%result.16, %result.14, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.73 : Tensor = aten::conv2d(%386, %self.features.9.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.56 : Tensor = aten::batch_norm(%input0.73, %self.features.9.block.0.1.weight, %self.features.9.block.0.1.bias, %self.features.9.block.0.1.running_mean, %self.features.9.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %389 : Tensor = aten::hardswish(%input1.56) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.77 : Tensor = aten::conv2d(%389, %self.features.9.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.58 : Tensor = aten::batch_norm(%input0.77, %self.features.9.block.1.1.weight, %self.features.9.block.1.1.bias, %self.features.9.block.1.1.running_mean, %self.features.9.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %392 : Tensor = aten::hardswish(%input1.58) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.79 : Tensor = aten::conv2d(%392, %self.features.9.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.18 : Tensor = aten::batch_norm(%input0.79, %self.features.9.block.2.1.weight, %self.features.9.block.2.1.bias, %self.features.9.block.2.1.running_mean, %self.features.9.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %395 : Tensor = aten::add(%result.18, %386, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.81 : Tensor = aten::conv2d(%395, %self.features.10.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.62 : Tensor = aten::batch_norm(%input0.81, %self.features.10.block.0.1.weight, %self.features.10.block.0.1.bias, %self.features.10.block.0.1.running_mean, %self.features.10.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %398 : Tensor = aten::hardswish(%input1.62) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.85 : Tensor = aten::conv2d(%398, %self.features.10.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.64 : Tensor = aten::batch_norm(%input0.85, %self.features.10.block.1.1.weight, %self.features.10.block.1.1.bias, %self.features.10.block.1.1.running_mean, %self.features.10.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %401 : Tensor = aten::hardswish(%input1.64) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.87 : Tensor = aten::conv2d(%401, %self.features.10.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.20 : Tensor = aten::batch_norm(%input0.87, %self.features.10.block.2.1.weight, %self.features.10.block.2.1.bias, %self.features.10.block.2.1.running_mean, %self.features.10.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %404 : Tensor = aten::add(%result.20, %395, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.89 : Tensor = aten::conv2d(%404, %self.features.11.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.68 : Tensor = aten::batch_norm(%input0.89, %self.features.11.block.0.1.weight, %self.features.11.block.0.1.bias, %self.features.11.block.0.1.running_mean, %self.features.11.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %407 : Tensor = aten::hardswish(%input1.68) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.93 : Tensor = aten::conv2d(%407, %self.features.11.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %9) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.70 : Tensor = aten::batch_norm(%input0.93, %self.features.11.block.1.1.weight, %self.features.11.block.1.1.bias, %self.features.11.block.1.1.running_mean, %self.features.11.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %410 : Tensor = aten::hardswish(%input1.70) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %411 : int[] = aten::size(%410) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %412 : int = aten::len(%411) # <string>:5:9
  %413 : bool = aten::gt(%412, %18) # <string>:5:9
   = prim::If(%413) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.8 : Tensor = aten::adaptive_avg_pool2d(%410, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.8 : Tensor = aten::conv2d(%scale.8, %self.features.11.block.2.fc1.weight, %self.features.11.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %416 : Tensor = aten::relu(%scale0.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.8 : Tensor = aten::conv2d(%416, %self.features.11.block.2.fc2.weight, %self.features.11.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %418 : Tensor = aten::hardsigmoid(%scale2.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.12 : Tensor = aten::mul(%418, %410) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.95 : Tensor = aten::conv2d(%input2.12, %self.features.11.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.22 : Tensor = aten::batch_norm(%input0.95, %self.features.11.block.3.1.weight, %self.features.11.block.3.1.bias, %self.features.11.block.3.1.running_mean, %self.features.11.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.97 : Tensor = aten::conv2d(%result.22, %self.features.12.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.74 : Tensor = aten::batch_norm(%input0.97, %self.features.12.block.0.1.weight, %self.features.12.block.0.1.bias, %self.features.12.block.0.1.running_mean, %self.features.12.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %424 : Tensor = aten::hardswish(%input1.74) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.101 : Tensor = aten::conv2d(%424, %self.features.12.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.76 : Tensor = aten::batch_norm(%input0.101, %self.features.12.block.1.1.weight, %self.features.12.block.1.1.bias, %self.features.12.block.1.1.running_mean, %self.features.12.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %427 : Tensor = aten::hardswish(%input1.76) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %428 : int[] = aten::size(%427) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %429 : int = aten::len(%428) # <string>:5:9
  %430 : bool = aten::gt(%429, %18) # <string>:5:9
   = prim::If(%430) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.10 : Tensor = aten::adaptive_avg_pool2d(%427, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.10 : Tensor = aten::conv2d(%scale.10, %self.features.12.block.2.fc1.weight, %self.features.12.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %433 : Tensor = aten::relu(%scale0.10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.10 : Tensor = aten::conv2d(%433, %self.features.12.block.2.fc2.weight, %self.features.12.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %435 : Tensor = aten::hardsigmoid(%scale2.10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.14 : Tensor = aten::mul(%435, %427) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.103 : Tensor = aten::conv2d(%input2.14, %self.features.12.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.24 : Tensor = aten::batch_norm(%input0.103, %self.features.12.block.3.1.weight, %self.features.12.block.3.1.bias, %self.features.12.block.3.1.running_mean, %self.features.12.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %439 : Tensor = aten::add(%result.24, %result.22, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.105 : Tensor = aten::conv2d(%439, %self.features.13.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.80 : Tensor = aten::batch_norm(%input0.105, %self.features.13.block.0.1.weight, %self.features.13.block.0.1.bias, %self.features.13.block.0.1.running_mean, %self.features.13.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %442 : Tensor = aten::hardswish(%input1.80) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.109 : Tensor = aten::conv2d(%442, %self.features.13.block.1.0.weight, %self.features.0.0.bias, %4, %4, %3, %8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.82 : Tensor = aten::batch_norm(%input0.109, %self.features.13.block.1.1.weight, %self.features.13.block.1.1.bias, %self.features.13.block.1.1.running_mean, %self.features.13.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %445 : Tensor = aten::hardswish(%input1.82) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %446 : int[] = aten::size(%445) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %447 : int = aten::len(%446) # <string>:5:9
  %448 : bool = aten::gt(%447, %18) # <string>:5:9
   = prim::If(%448) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.12 : Tensor = aten::adaptive_avg_pool2d(%445, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.12 : Tensor = aten::conv2d(%scale.12, %self.features.13.block.2.fc1.weight, %self.features.13.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %451 : Tensor = aten::relu(%scale0.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.12 : Tensor = aten::conv2d(%451, %self.features.13.block.2.fc2.weight, %self.features.13.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %453 : Tensor = aten::hardsigmoid(%scale2.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.16 : Tensor = aten::mul(%453, %445) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.111 : Tensor = aten::conv2d(%input2.16, %self.features.13.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.26 : Tensor = aten::batch_norm(%input0.111, %self.features.13.block.3.1.weight, %self.features.13.block.3.1.bias, %self.features.13.block.3.1.running_mean, %self.features.13.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.113 : Tensor = aten::conv2d(%result.26, %self.features.14.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.86 : Tensor = aten::batch_norm(%input0.113, %self.features.14.block.0.1.weight, %self.features.14.block.0.1.bias, %self.features.14.block.0.1.running_mean, %self.features.14.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %459 : Tensor = aten::hardswish(%input1.86) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.117 : Tensor = aten::conv2d(%459, %self.features.14.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %7) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.88 : Tensor = aten::batch_norm(%input0.117, %self.features.14.block.1.1.weight, %self.features.14.block.1.1.bias, %self.features.14.block.1.1.running_mean, %self.features.14.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %462 : Tensor = aten::hardswish(%input1.88) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %463 : int[] = aten::size(%462) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %464 : int = aten::len(%463) # <string>:5:9
  %465 : bool = aten::gt(%464, %18) # <string>:5:9
   = prim::If(%465) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.14 : Tensor = aten::adaptive_avg_pool2d(%462, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.14 : Tensor = aten::conv2d(%scale.14, %self.features.14.block.2.fc1.weight, %self.features.14.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %468 : Tensor = aten::relu(%scale0.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.14 : Tensor = aten::conv2d(%468, %self.features.14.block.2.fc2.weight, %self.features.14.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %470 : Tensor = aten::hardsigmoid(%scale2.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.18 : Tensor = aten::mul(%470, %462) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.119 : Tensor = aten::conv2d(%input2.18, %self.features.14.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.28 : Tensor = aten::batch_norm(%input0.119, %self.features.14.block.3.1.weight, %self.features.14.block.3.1.bias, %self.features.14.block.3.1.running_mean, %self.features.14.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %474 : Tensor = aten::add(%result.28, %result.26, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.6 : Tensor = aten::conv2d(%474, %self.features.15.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.4 : Tensor = aten::batch_norm(%input0.6, %self.features.15.block.0.1.weight, %self.features.15.block.0.1.bias, %self.features.15.block.0.1.running_mean, %self.features.15.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %477 : Tensor = aten::hardswish(%input1.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.8 : Tensor = aten::conv2d(%477, %self.features.15.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %7) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.8 : Tensor = aten::batch_norm(%input0.8, %self.features.15.block.1.1.weight, %self.features.15.block.1.1.bias, %self.features.15.block.1.1.running_mean, %self.features.15.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %480 : Tensor = aten::hardswish(%input1.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %481 : int[] = aten::size(%480) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %482 : int = aten::len(%481) # <string>:5:9
  %483 : bool = aten::gt(%482, %18) # <string>:5:9
   = prim::If(%483) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %scale.1 : Tensor = aten::adaptive_avg_pool2d(%480, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.1 : Tensor = aten::conv2d(%scale.1, %self.features.15.block.2.fc1.weight, %self.features.15.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %486 : Tensor = aten::relu(%scale0.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.1 : Tensor = aten::conv2d(%486, %self.features.15.block.2.fc2.weight, %self.features.15.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %488 : Tensor = aten::hardsigmoid(%scale2.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.2 : Tensor = aten::mul(%488, %480) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.121 : Tensor = aten::conv2d(%input2.2, %self.features.15.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.1 : Tensor = aten::batch_norm(%input0.121, %self.features.15.block.3.1.weight, %self.features.15.block.3.1.bias, %self.features.15.block.3.1.running_mean, %self.features.15.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %492 : Tensor = aten::add(%result.1, %474, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.3 : Tensor = aten::conv2d(%492, %self.features.16.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.3 : Tensor = aten::batch_norm(%input0.3, %self.features.16.1.weight, %self.features.16.1.bias, %self.features.16.1.running_mean, %self.features.16.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %495 : Tensor = aten::hardswish(%input1.3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %496 : int[] = aten::size(%495) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1129:51
  %497 : int = aten::len(%496) # <string>:5:9
  %498 : bool = aten::gt(%497, %18) # <string>:5:9
   = prim::If(%498) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%14) # <string>:5:2
      -> ()
  %x1.1 : Tensor = aten::adaptive_avg_pool2d(%495, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %x2.1 : Tensor = aten::flatten(%x1.1, %6, %5) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:178:12
  %input0.1 : Tensor = aten::linear(%x2.1, %self.classifier.0.weight, %self.classifier.0.bias) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1847:11
  %502 : Tensor = aten::hardswish(%input0.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %503 : Tensor = aten::dropout(%502, %21, %self.features.0.1.training) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1168:11
  %504 : Tensor = aten::linear(%503, %self.classifier.3.weight, %self.classifier.3.bias) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1847:11
  return (%504)

graph(%x.1 : Float(1, 3, 224, 224, strides=[150528, 50176, 224, 1], requires_grad=0, device=cpu)):
  %2 : int[] = prim::Constant[value=[0, 0]]()
  %3 : int[] = prim::Constant[value=[1, 1]]()
  %4 : int[] = prim::Constant[value=[2, 2]]()
  %5 : int = prim::Constant[value=-1]()
  %6 : int = prim::Constant[value=1]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:178:29
  %7 : int = prim::Constant[value=960]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %8 : int = prim::Constant[value=672]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %9 : int = prim::Constant[value=480]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %10 : int = prim::Constant[value=184]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %11 : int = prim::Constant[value=200]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %12 : int = prim::Constant[value=240]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %13 : int = prim::Constant[value=120]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %15 : int = prim::Constant[value=72]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %16 : int = prim::Constant[value=64]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %17 : int = prim::Constant[value=16]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:443:53
  %19 : float = prim::Constant[value=0.001]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:178:12
  %20 : float = prim::Constant[value=0.01]() # :0:0
  %21 : float = prim::Constant[value=0.20000000000000001]() # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/dropout.py:58:32
  %self.classifier.3.bias : Float(1000, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.3.weight : Float(1000, 1280, strides=[1280, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.0.bias : Float(1280, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.classifier.0.weight : Float(1280, 960, strides=[960, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.16.0.weight : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.bias : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.weight : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.running_var : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.1.running_mean : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.3.0.weight : Float(160, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc2.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc2.weight : Float(960, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.2.fc1.weight : Float(240, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.1.0.weight : Float(960, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.15.block.0.0.weight : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.bias : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.weight : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.running_var : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.1.running_mean : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.3.0.weight : Float(160, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc2.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc2.weight : Float(960, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.2.fc1.weight : Float(240, 960, 1, 1, strides=[960, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.1.0.weight : Float(960, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.bias : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.weight : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.running_var : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.1.running_mean : Float(960, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.14.block.0.0.weight : Float(960, 160, 1, 1, strides=[160, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.bias : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.weight : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.running_var : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.1.running_mean : Float(160, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.3.0.weight : Float(160, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc2.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc2.weight : Float(672, 168, 1, 1, strides=[168, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc1.bias : Float(168, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.2.fc1.weight : Float(168, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.1.0.weight : Float(672, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.13.block.0.0.weight : Float(672, 112, 1, 1, strides=[112, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.bias : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.weight : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.running_var : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.1.running_mean : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.3.0.weight : Float(112, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc2.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc2.weight : Float(672, 168, 1, 1, strides=[168, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc1.bias : Float(168, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.2.fc1.weight : Float(168, 672, 1, 1, strides=[672, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.1.0.weight : Float(672, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.bias : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.weight : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.running_var : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.1.running_mean : Float(672, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.12.block.0.0.weight : Float(672, 112, 1, 1, strides=[112, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.bias : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.weight : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.running_var : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.1.running_mean : Float(112, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.3.0.weight : Float(112, 480, 1, 1, strides=[480, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc2.bias : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc2.weight : Float(480, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.2.fc1.weight : Float(120, 480, 1, 1, strides=[480, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.bias : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.weight : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.running_var : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.1.running_mean : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.1.0.weight : Float(480, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.bias : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.weight : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.running_var : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.1.running_mean : Float(480, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.11.block.0.0.weight : Float(480, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.2.0.weight : Float(80, 184, 1, 1, strides=[184, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.1.0.weight : Float(184, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.10.block.0.0.weight : Float(184, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.2.0.weight : Float(80, 184, 1, 1, strides=[184, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.1.0.weight : Float(184, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.bias : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.weight : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.running_var : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.1.running_mean : Float(184, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.9.block.0.0.weight : Float(184, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.2.0.weight : Float(80, 200, 1, 1, strides=[200, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.bias : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.weight : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.running_var : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.1.running_mean : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.1.0.weight : Float(200, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.bias : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.weight : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.running_var : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.1.running_mean : Float(200, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.8.block.0.0.weight : Float(200, 80, 1, 1, strides=[80, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.bias : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.weight : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.running_var : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.1.running_mean : Float(80, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.2.0.weight : Float(80, 240, 1, 1, strides=[240, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.weight : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.running_var : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.1.running_mean : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.1.0.weight : Float(240, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.bias : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.weight : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.running_var : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.1.running_mean : Float(240, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.7.block.0.0.weight : Float(240, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.bias : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.weight : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.running_var : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.1.running_mean : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.3.0.weight : Float(40, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc2.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc2.weight : Float(120, 32, 1, 1, strides=[32, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc1.bias : Float(32, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.2.fc1.weight : Float(32, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.1.0.weight : Float(120, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.6.block.0.0.weight : Float(120, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.bias : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.weight : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.running_var : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.1.running_mean : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.3.0.weight : Float(40, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc2.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc2.weight : Float(120, 32, 1, 1, strides=[32, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc1.bias : Float(32, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.2.fc1.weight : Float(32, 120, 1, 1, strides=[120, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.1.0.weight : Float(120, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.bias : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.weight : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.running_var : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.1.running_mean : Float(120, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.5.block.0.0.weight : Float(120, 40, 1, 1, strides=[40, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.bias : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.weight : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.running_var : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.1.running_mean : Float(40, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.3.0.weight : Float(40, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc2.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc2.weight : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc1.bias : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.2.fc1.weight : Float(24, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.1.0.weight : Float(72, 1, 5, 5, strides=[25, 25, 5, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.4.block.0.0.weight : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.bias : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.weight : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.running_var : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.1.running_mean : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.2.0.weight : Float(24, 72, 1, 1, strides=[72, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.1.0.weight : Float(72, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.bias : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.weight : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.running_var : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.1.running_mean : Float(72, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.3.block.0.0.weight : Float(72, 24, 1, 1, strides=[24, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.bias : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.weight : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.running_var : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.1.running_mean : Float(24, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.2.0.weight : Float(24, 64, 1, 1, strides=[64, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.bias : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.weight : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.running_var : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.1.running_mean : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.1.0.weight : Float(64, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.bias : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.weight : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.running_var : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.1.running_mean : Float(64, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.2.block.0.0.weight : Float(64, 16, 1, 1, strides=[16, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.use_res_connect : bool = prim::Constant[value=1]()
  %self.features.1.block.1.1.bias : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.1.weight : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.1.running_var : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.1.running_mean : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.1.0.weight : Float(16, 16, 1, 1, strides=[16, 1, 1, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.bias : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.weight : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.running_var : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.1.running_mean : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.1.block.0.0.weight : Float(16, 1, 3, 3, strides=[9, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.bias : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.weight : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.running_var : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.running_mean : Float(16, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %self.features.0.1.training : bool = prim::Constant[value=0]()
  %self.features.0.0.bias : NoneType = prim::Constant()
  %self.features.0.0.weight : Float(16, 3, 3, 3, strides=[27, 9, 3, 1], requires_grad=0, device=cpu) = prim::Constant[value=<Tensor>]()
  %input0.9 : Tensor(1, 16, 112, 112) = aten::conv2d(%x.1, %self.features.0.0.weight, %self.features.0.0.bias, %4, %3, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.92 : Tensor(1, 16, 112, 112) = aten::batch_norm(%input0.9, %self.features.0.1.weight, %self.features.0.1.bias, %self.features.0.1.running_mean, %self.features.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %293 : Tensor(1, 16, 112, 112) = aten::hardswish(%input1.92) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.11 : Tensor(1, 16, 112, 112) = aten::conv2d(%293, %self.features.1.block.0.0.weight, %self.features.0.0.bias, %3, %3, %3, %17) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.12 : Tensor(1, 16, 112, 112) = aten::batch_norm(%input0.11, %self.features.1.block.0.1.weight, %self.features.1.block.0.1.bias, %self.features.1.block.0.1.running_mean, %self.features.1.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %296 : Tensor(1, 16, 112, 112) = aten::relu(%input1.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.15 : Tensor(1, 16, 112, 112) = aten::conv2d(%296, %self.features.1.block.1.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.2 : Tensor(1, 16, 112, 112) = aten::batch_norm(%input0.15, %self.features.1.block.1.1.weight, %self.features.1.block.1.1.bias, %self.features.1.block.1.1.running_mean, %self.features.1.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %299 : Tensor(1, 16, 112, 112) = aten::add(%result.2, %293, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.17 : Tensor(1, 64, 112, 112) = aten::conv2d(%299, %self.features.2.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.14 : Tensor(1, 64, 112, 112) = aten::batch_norm(%input0.17, %self.features.2.block.0.1.weight, %self.features.2.block.0.1.bias, %self.features.2.block.0.1.running_mean, %self.features.2.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %302 : Tensor(1, 64, 112, 112) = aten::relu(%input1.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.21 : Tensor(1, 64, 56, 56) = aten::conv2d(%302, %self.features.2.block.1.0.weight, %self.features.0.0.bias, %4, %3, %3, %16) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.16 : Tensor(1, 64, 56, 56) = aten::batch_norm(%input0.21, %self.features.2.block.1.1.weight, %self.features.2.block.1.1.bias, %self.features.2.block.1.1.running_mean, %self.features.2.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %305 : Tensor(1, 64, 56, 56) = aten::relu(%input1.16) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.23 : Tensor(1, 24, 56, 56) = aten::conv2d(%305, %self.features.2.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.4 : Tensor(1, 24, 56, 56) = aten::batch_norm(%input0.23, %self.features.2.block.2.1.weight, %self.features.2.block.2.1.bias, %self.features.2.block.2.1.running_mean, %self.features.2.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.25 : Tensor(1, 72, 56, 56) = aten::conv2d(%result.4, %self.features.3.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.20 : Tensor(1, 72, 56, 56) = aten::batch_norm(%input0.25, %self.features.3.block.0.1.weight, %self.features.3.block.0.1.bias, %self.features.3.block.0.1.running_mean, %self.features.3.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %310 : Tensor(1, 72, 56, 56) = aten::relu(%input1.20) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.29 : Tensor(1, 72, 56, 56) = aten::conv2d(%310, %self.features.3.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %15) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.22 : Tensor(1, 72, 56, 56) = aten::batch_norm(%input0.29, %self.features.3.block.1.1.weight, %self.features.3.block.1.1.bias, %self.features.3.block.1.1.running_mean, %self.features.3.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %313 : Tensor(1, 72, 56, 56) = aten::relu(%input1.22) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.31 : Tensor(1, 24, 56, 56) = aten::conv2d(%313, %self.features.3.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.6 : Tensor(1, 24, 56, 56) = aten::batch_norm(%input0.31, %self.features.3.block.2.1.weight, %self.features.3.block.2.1.bias, %self.features.3.block.2.1.running_mean, %self.features.3.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %316 : Tensor(1, 24, 56, 56) = aten::add(%result.6, %result.4, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.33 : Tensor(1, 72, 56, 56) = aten::conv2d(%316, %self.features.4.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.26 : Tensor(1, 72, 56, 56) = aten::batch_norm(%input0.33, %self.features.4.block.0.1.weight, %self.features.4.block.0.1.bias, %self.features.4.block.0.1.running_mean, %self.features.4.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %319 : Tensor(1, 72, 56, 56) = aten::relu(%input1.26) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.37 : Tensor(1, 72, 28, 28) = aten::conv2d(%319, %self.features.4.block.1.0.weight, %self.features.0.0.bias, %4, %4, %3, %15) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.28 : Tensor(1, 72, 28, 28) = aten::batch_norm(%input0.37, %self.features.4.block.1.1.weight, %self.features.4.block.1.1.bias, %self.features.4.block.1.1.running_mean, %self.features.4.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %322 : Tensor(1, 72, 28, 28) = aten::relu(%input1.28) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale.2 : Tensor(1, 72, 1, 1) = aten::adaptive_avg_pool2d(%322, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.2 : Tensor(1, 24, 1, 1) = aten::conv2d(%scale.2, %self.features.4.block.2.fc1.weight, %self.features.4.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %328 : Tensor(1, 24, 1, 1) = aten::relu(%scale0.2) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.2 : Tensor(1, 72, 1, 1) = aten::conv2d(%328, %self.features.4.block.2.fc2.weight, %self.features.4.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %330 : Tensor(1, 72, 1, 1) = aten::hardsigmoid(%scale2.2) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.6 : Tensor(1, 72, 28, 28) = aten::mul(%330, %322) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.39 : Tensor(1, 40, 28, 28) = aten::conv2d(%input2.6, %self.features.4.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.8 : Tensor(1, 40, 28, 28) = aten::batch_norm(%input0.39, %self.features.4.block.3.1.weight, %self.features.4.block.3.1.bias, %self.features.4.block.3.1.running_mean, %self.features.4.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.41 : Tensor(1, 120, 28, 28) = aten::conv2d(%result.8, %self.features.5.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.32 : Tensor(1, 120, 28, 28) = aten::batch_norm(%input0.41, %self.features.5.block.0.1.weight, %self.features.5.block.0.1.bias, %self.features.5.block.0.1.running_mean, %self.features.5.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %336 : Tensor(1, 120, 28, 28) = aten::relu(%input1.32) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.45 : Tensor(1, 120, 28, 28) = aten::conv2d(%336, %self.features.5.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %13) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.34 : Tensor(1, 120, 28, 28) = aten::batch_norm(%input0.45, %self.features.5.block.1.1.weight, %self.features.5.block.1.1.bias, %self.features.5.block.1.1.running_mean, %self.features.5.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %339 : Tensor(1, 120, 28, 28) = aten::relu(%input1.34) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale.4 : Tensor(1, 120, 1, 1) = aten::adaptive_avg_pool2d(%339, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.4 : Tensor(1, 32, 1, 1) = aten::conv2d(%scale.4, %self.features.5.block.2.fc1.weight, %self.features.5.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %345 : Tensor(1, 32, 1, 1) = aten::relu(%scale0.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.4 : Tensor(1, 120, 1, 1) = aten::conv2d(%345, %self.features.5.block.2.fc2.weight, %self.features.5.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %347 : Tensor(1, 120, 1, 1) = aten::hardsigmoid(%scale2.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.8 : Tensor(1, 120, 28, 28) = aten::mul(%347, %339) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.47 : Tensor(1, 40, 28, 28) = aten::conv2d(%input2.8, %self.features.5.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.10 : Tensor(1, 40, 28, 28) = aten::batch_norm(%input0.47, %self.features.5.block.3.1.weight, %self.features.5.block.3.1.bias, %self.features.5.block.3.1.running_mean, %self.features.5.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %351 : Tensor(1, 40, 28, 28) = aten::add(%result.10, %result.8, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.49 : Tensor(1, 120, 28, 28) = aten::conv2d(%351, %self.features.6.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.38 : Tensor(1, 120, 28, 28) = aten::batch_norm(%input0.49, %self.features.6.block.0.1.weight, %self.features.6.block.0.1.bias, %self.features.6.block.0.1.running_mean, %self.features.6.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %354 : Tensor(1, 120, 28, 28) = aten::relu(%input1.38) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %input0.53 : Tensor(1, 120, 28, 28) = aten::conv2d(%354, %self.features.6.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %13) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.40 : Tensor(1, 120, 28, 28) = aten::batch_norm(%input0.53, %self.features.6.block.1.1.weight, %self.features.6.block.1.1.bias, %self.features.6.block.1.1.running_mean, %self.features.6.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %357 : Tensor(1, 120, 28, 28) = aten::relu(%input1.40) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale.6 : Tensor(1, 120, 1, 1) = aten::adaptive_avg_pool2d(%357, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.6 : Tensor(1, 32, 1, 1) = aten::conv2d(%scale.6, %self.features.6.block.2.fc1.weight, %self.features.6.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %363 : Tensor(1, 32, 1, 1) = aten::relu(%scale0.6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.6 : Tensor(1, 120, 1, 1) = aten::conv2d(%363, %self.features.6.block.2.fc2.weight, %self.features.6.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %365 : Tensor(1, 120, 1, 1) = aten::hardsigmoid(%scale2.6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.10 : Tensor(1, 120, 28, 28) = aten::mul(%365, %357) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.55 : Tensor(1, 40, 28, 28) = aten::conv2d(%input2.10, %self.features.6.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.12 : Tensor(1, 40, 28, 28) = aten::batch_norm(%input0.55, %self.features.6.block.3.1.weight, %self.features.6.block.3.1.bias, %self.features.6.block.3.1.running_mean, %self.features.6.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %369 : Tensor(1, 40, 28, 28) = aten::add(%result.12, %351, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.57 : Tensor(1, 240, 28, 28) = aten::conv2d(%369, %self.features.7.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.44 : Tensor(1, 240, 28, 28) = aten::batch_norm(%input0.57, %self.features.7.block.0.1.weight, %self.features.7.block.0.1.bias, %self.features.7.block.0.1.running_mean, %self.features.7.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %372 : Tensor(1, 240, 28, 28) = aten::hardswish(%input1.44) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.61 : Tensor(1, 240, 14, 14) = aten::conv2d(%372, %self.features.7.block.1.0.weight, %self.features.0.0.bias, %4, %3, %3, %12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.46 : Tensor(1, 240, 14, 14) = aten::batch_norm(%input0.61, %self.features.7.block.1.1.weight, %self.features.7.block.1.1.bias, %self.features.7.block.1.1.running_mean, %self.features.7.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %375 : Tensor(1, 240, 14, 14) = aten::hardswish(%input1.46) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.63 : Tensor(1, 80, 14, 14) = aten::conv2d(%375, %self.features.7.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.14 : Tensor(1, 80, 14, 14) = aten::batch_norm(%input0.63, %self.features.7.block.2.1.weight, %self.features.7.block.2.1.bias, %self.features.7.block.2.1.running_mean, %self.features.7.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.65 : Tensor(1, 200, 14, 14) = aten::conv2d(%result.14, %self.features.8.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.50 : Tensor(1, 200, 14, 14) = aten::batch_norm(%input0.65, %self.features.8.block.0.1.weight, %self.features.8.block.0.1.bias, %self.features.8.block.0.1.running_mean, %self.features.8.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %380 : Tensor(1, 200, 14, 14) = aten::hardswish(%input1.50) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.69 : Tensor(1, 200, 14, 14) = aten::conv2d(%380, %self.features.8.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %11) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.52 : Tensor(1, 200, 14, 14) = aten::batch_norm(%input0.69, %self.features.8.block.1.1.weight, %self.features.8.block.1.1.bias, %self.features.8.block.1.1.running_mean, %self.features.8.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %383 : Tensor(1, 200, 14, 14) = aten::hardswish(%input1.52) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.71 : Tensor(1, 80, 14, 14) = aten::conv2d(%383, %self.features.8.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.16 : Tensor(1, 80, 14, 14) = aten::batch_norm(%input0.71, %self.features.8.block.2.1.weight, %self.features.8.block.2.1.bias, %self.features.8.block.2.1.running_mean, %self.features.8.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %386 : Tensor(1, 80, 14, 14) = aten::add(%result.16, %result.14, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.73 : Tensor(1, 184, 14, 14) = aten::conv2d(%386, %self.features.9.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.56 : Tensor(1, 184, 14, 14) = aten::batch_norm(%input0.73, %self.features.9.block.0.1.weight, %self.features.9.block.0.1.bias, %self.features.9.block.0.1.running_mean, %self.features.9.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %389 : Tensor(1, 184, 14, 14) = aten::hardswish(%input1.56) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.77 : Tensor(1, 184, 14, 14) = aten::conv2d(%389, %self.features.9.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.58 : Tensor(1, 184, 14, 14) = aten::batch_norm(%input0.77, %self.features.9.block.1.1.weight, %self.features.9.block.1.1.bias, %self.features.9.block.1.1.running_mean, %self.features.9.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %392 : Tensor(1, 184, 14, 14) = aten::hardswish(%input1.58) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.79 : Tensor(1, 80, 14, 14) = aten::conv2d(%392, %self.features.9.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.18 : Tensor(1, 80, 14, 14) = aten::batch_norm(%input0.79, %self.features.9.block.2.1.weight, %self.features.9.block.2.1.bias, %self.features.9.block.2.1.running_mean, %self.features.9.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %395 : Tensor(1, 80, 14, 14) = aten::add(%result.18, %386, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.81 : Tensor(1, 184, 14, 14) = aten::conv2d(%395, %self.features.10.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.62 : Tensor(1, 184, 14, 14) = aten::batch_norm(%input0.81, %self.features.10.block.0.1.weight, %self.features.10.block.0.1.bias, %self.features.10.block.0.1.running_mean, %self.features.10.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %398 : Tensor(1, 184, 14, 14) = aten::hardswish(%input1.62) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.85 : Tensor(1, 184, 14, 14) = aten::conv2d(%398, %self.features.10.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.64 : Tensor(1, 184, 14, 14) = aten::batch_norm(%input0.85, %self.features.10.block.1.1.weight, %self.features.10.block.1.1.bias, %self.features.10.block.1.1.running_mean, %self.features.10.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %401 : Tensor(1, 184, 14, 14) = aten::hardswish(%input1.64) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.87 : Tensor(1, 80, 14, 14) = aten::conv2d(%401, %self.features.10.block.2.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.20 : Tensor(1, 80, 14, 14) = aten::batch_norm(%input0.87, %self.features.10.block.2.1.weight, %self.features.10.block.2.1.bias, %self.features.10.block.2.1.running_mean, %self.features.10.block.2.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %404 : Tensor(1, 80, 14, 14) = aten::add(%result.20, %395, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.89 : Tensor(1, 480, 14, 14) = aten::conv2d(%404, %self.features.11.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.68 : Tensor(1, 480, 14, 14) = aten::batch_norm(%input0.89, %self.features.11.block.0.1.weight, %self.features.11.block.0.1.bias, %self.features.11.block.0.1.running_mean, %self.features.11.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %407 : Tensor(1, 480, 14, 14) = aten::hardswish(%input1.68) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.93 : Tensor(1, 480, 14, 14) = aten::conv2d(%407, %self.features.11.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %9) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.70 : Tensor(1, 480, 14, 14) = aten::batch_norm(%input0.93, %self.features.11.block.1.1.weight, %self.features.11.block.1.1.bias, %self.features.11.block.1.1.running_mean, %self.features.11.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %410 : Tensor(1, 480, 14, 14) = aten::hardswish(%input1.70) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.8 : Tensor(1, 480, 1, 1) = aten::adaptive_avg_pool2d(%410, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.8 : Tensor(1, 120, 1, 1) = aten::conv2d(%scale.8, %self.features.11.block.2.fc1.weight, %self.features.11.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %416 : Tensor(1, 120, 1, 1) = aten::relu(%scale0.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.8 : Tensor(1, 480, 1, 1) = aten::conv2d(%416, %self.features.11.block.2.fc2.weight, %self.features.11.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %418 : Tensor(1, 480, 1, 1) = aten::hardsigmoid(%scale2.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.12 : Tensor(1, 480, 14, 14) = aten::mul(%418, %410) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.95 : Tensor(1, 112, 14, 14) = aten::conv2d(%input2.12, %self.features.11.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.22 : Tensor(1, 112, 14, 14) = aten::batch_norm(%input0.95, %self.features.11.block.3.1.weight, %self.features.11.block.3.1.bias, %self.features.11.block.3.1.running_mean, %self.features.11.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.97 : Tensor(1, 672, 14, 14) = aten::conv2d(%result.22, %self.features.12.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.74 : Tensor(1, 672, 14, 14) = aten::batch_norm(%input0.97, %self.features.12.block.0.1.weight, %self.features.12.block.0.1.bias, %self.features.12.block.0.1.running_mean, %self.features.12.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %424 : Tensor(1, 672, 14, 14) = aten::hardswish(%input1.74) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.101 : Tensor(1, 672, 14, 14) = aten::conv2d(%424, %self.features.12.block.1.0.weight, %self.features.0.0.bias, %3, %3, %3, %8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.76 : Tensor(1, 672, 14, 14) = aten::batch_norm(%input0.101, %self.features.12.block.1.1.weight, %self.features.12.block.1.1.bias, %self.features.12.block.1.1.running_mean, %self.features.12.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %427 : Tensor(1, 672, 14, 14) = aten::hardswish(%input1.76) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.10 : Tensor(1, 672, 1, 1) = aten::adaptive_avg_pool2d(%427, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.10 : Tensor(1, 168, 1, 1) = aten::conv2d(%scale.10, %self.features.12.block.2.fc1.weight, %self.features.12.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %433 : Tensor(1, 168, 1, 1) = aten::relu(%scale0.10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.10 : Tensor(1, 672, 1, 1) = aten::conv2d(%433, %self.features.12.block.2.fc2.weight, %self.features.12.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %435 : Tensor(1, 672, 1, 1) = aten::hardsigmoid(%scale2.10) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.14 : Tensor(1, 672, 14, 14) = aten::mul(%435, %427) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.103 : Tensor(1, 112, 14, 14) = aten::conv2d(%input2.14, %self.features.12.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.24 : Tensor(1, 112, 14, 14) = aten::batch_norm(%input0.103, %self.features.12.block.3.1.weight, %self.features.12.block.3.1.bias, %self.features.12.block.3.1.running_mean, %self.features.12.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %439 : Tensor(1, 112, 14, 14) = aten::add(%result.24, %result.22, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.105 : Tensor(1, 672, 14, 14) = aten::conv2d(%439, %self.features.13.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.80 : Tensor(1, 672, 14, 14) = aten::batch_norm(%input0.105, %self.features.13.block.0.1.weight, %self.features.13.block.0.1.bias, %self.features.13.block.0.1.running_mean, %self.features.13.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %442 : Tensor(1, 672, 14, 14) = aten::hardswish(%input1.80) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.109 : Tensor(1, 672, 7, 7) = aten::conv2d(%442, %self.features.13.block.1.0.weight, %self.features.0.0.bias, %4, %4, %3, %8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.82 : Tensor(1, 672, 7, 7) = aten::batch_norm(%input0.109, %self.features.13.block.1.1.weight, %self.features.13.block.1.1.bias, %self.features.13.block.1.1.running_mean, %self.features.13.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %445 : Tensor(1, 672, 7, 7) = aten::hardswish(%input1.82) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.12 : Tensor(1, 672, 1, 1) = aten::adaptive_avg_pool2d(%445, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.12 : Tensor(1, 168, 1, 1) = aten::conv2d(%scale.12, %self.features.13.block.2.fc1.weight, %self.features.13.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %451 : Tensor(1, 168, 1, 1) = aten::relu(%scale0.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.12 : Tensor(1, 672, 1, 1) = aten::conv2d(%451, %self.features.13.block.2.fc2.weight, %self.features.13.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %453 : Tensor(1, 672, 1, 1) = aten::hardsigmoid(%scale2.12) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.16 : Tensor(1, 672, 7, 7) = aten::mul(%453, %445) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.111 : Tensor(1, 160, 7, 7) = aten::conv2d(%input2.16, %self.features.13.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.26 : Tensor(1, 160, 7, 7) = aten::batch_norm(%input0.111, %self.features.13.block.3.1.weight, %self.features.13.block.3.1.bias, %self.features.13.block.3.1.running_mean, %self.features.13.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %input0.113 : Tensor(1, 960, 7, 7) = aten::conv2d(%result.26, %self.features.14.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.86 : Tensor(1, 960, 7, 7) = aten::batch_norm(%input0.113, %self.features.14.block.0.1.weight, %self.features.14.block.0.1.bias, %self.features.14.block.0.1.running_mean, %self.features.14.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %459 : Tensor(1, 960, 7, 7) = aten::hardswish(%input1.86) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.117 : Tensor(1, 960, 7, 7) = aten::conv2d(%459, %self.features.14.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %7) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.88 : Tensor(1, 960, 7, 7) = aten::batch_norm(%input0.117, %self.features.14.block.1.1.weight, %self.features.14.block.1.1.bias, %self.features.14.block.1.1.running_mean, %self.features.14.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %462 : Tensor(1, 960, 7, 7) = aten::hardswish(%input1.88) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.14 : Tensor(1, 960, 1, 1) = aten::adaptive_avg_pool2d(%462, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.14 : Tensor(1, 240, 1, 1) = aten::conv2d(%scale.14, %self.features.14.block.2.fc1.weight, %self.features.14.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %468 : Tensor(1, 240, 1, 1) = aten::relu(%scale0.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.14 : Tensor(1, 960, 1, 1) = aten::conv2d(%468, %self.features.14.block.2.fc2.weight, %self.features.14.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %470 : Tensor(1, 960, 1, 1) = aten::hardsigmoid(%scale2.14) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.18 : Tensor(1, 960, 7, 7) = aten::mul(%470, %462) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.119 : Tensor(1, 160, 7, 7) = aten::conv2d(%input2.18, %self.features.14.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.28 : Tensor(1, 160, 7, 7) = aten::batch_norm(%input0.119, %self.features.14.block.3.1.weight, %self.features.14.block.3.1.bias, %self.features.14.block.3.1.running_mean, %self.features.14.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %474 : Tensor(1, 160, 7, 7) = aten::add(%result.28, %result.26, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.6 : Tensor(1, 960, 7, 7) = aten::conv2d(%474, %self.features.15.block.0.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.4 : Tensor(1, 960, 7, 7) = aten::batch_norm(%input0.6, %self.features.15.block.0.1.weight, %self.features.15.block.0.1.bias, %self.features.15.block.0.1.running_mean, %self.features.15.block.0.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %477 : Tensor(1, 960, 7, 7) = aten::hardswish(%input1.4) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %input0.8 : Tensor(1, 960, 7, 7) = aten::conv2d(%477, %self.features.15.block.1.0.weight, %self.features.0.0.bias, %3, %4, %3, %7) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.8 : Tensor(1, 960, 7, 7) = aten::batch_norm(%input0.8, %self.features.15.block.1.1.weight, %self.features.15.block.1.1.bias, %self.features.15.block.1.1.running_mean, %self.features.15.block.1.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %480 : Tensor(1, 960, 7, 7) = aten::hardswish(%input1.8) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %scale.1 : Tensor(1, 960, 1, 1) = aten::adaptive_avg_pool2d(%480, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %scale0.1 : Tensor(1, 240, 1, 1) = aten::conv2d(%scale.1, %self.features.15.block.2.fc1.weight, %self.features.15.block.2.fc1.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %486 : Tensor(1, 240, 1, 1) = aten::relu(%scale0.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1296:17
  %scale2.1 : Tensor(1, 960, 1, 1) = aten::conv2d(%486, %self.features.15.block.2.fc2.weight, %self.features.15.block.2.fc2.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %488 : Tensor(1, 960, 1, 1) = aten::hardsigmoid(%scale2.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1827:15
  %input2.2 : Tensor(1, 960, 7, 7) = aten::mul(%488, %480) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:39:15
  %input0.121 : Tensor(1, 160, 7, 7) = aten::conv2d(%input2.2, %self.features.15.block.3.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %result.1 : Tensor(1, 160, 7, 7) = aten::batch_norm(%input0.121, %self.features.15.block.3.1.weight, %self.features.15.block.3.1.bias, %self.features.15.block.3.1.running_mean, %self.features.15.block.3.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %492 : Tensor(1, 160, 7, 7) = aten::add(%result.1, %474, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:97:12
  %input0.3 : Tensor(1, 960, 7, 7) = aten::conv2d(%492, %self.features.16.0.weight, %self.features.0.0.bias, %3, %2, %3, %6) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
  %input1.3 : Tensor(1, 960, 7, 7) = aten::batch_norm(%input0.3, %self.features.16.1.weight, %self.features.16.1.bias, %self.features.16.1.running_mean, %self.features.16.1.running_var, %self.features.0.1.training, %20, %19, %self.features.1.use_res_connect) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:2281:11
  %495 : Tensor(1, 960, 7, 7) = aten::hardswish(%input1.3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %x1.1 : Tensor(1, 960, 1, 1) = aten::adaptive_avg_pool2d(%495, %3) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1130:11
  %x2.1 : Tensor(1, 960) = aten::flatten(%x1.1, %6, %5) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torchvision/models/mobilenetv3.py:178:12
  %input0.1 : Tensor(1, 1280) = aten::linear(%x2.1, %self.classifier.0.weight, %self.classifier.0.bias) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1847:11
  %502 : Tensor(1, 1280) = aten::hardswish(%input0.1) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1940:15
  %503 : Tensor(1, 1280) = aten::dropout(%502, %21, %self.features.0.1.training) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1168:11
  %504 : Tensor(1, 1000) = aten::linear(%503, %self.classifier.3.weight, %self.classifier.3.bias) # /Users/ivankobzarev/anaconda3/lib/python3.8/site-packages/torch/nn/functional.py:1847:11
  return (%504)

computeValue input0.9
XXX opStr:aten::conv2d
