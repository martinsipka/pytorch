#pragma once

#include "lazy_tensor_core/csrc/ir.h"
#include "lazy_tensors/computation_client/cache.h"

namespace torch_lazy_tensors {
namespace ir {

class TsNode : public Node {
 public:
  TsNode(OpKind op, OpList operands, lazy_tensors::Shape shape,
         size_t num_outputs = 1, lazy_tensors::hash_t hash_seed = 0x5a2d296e9);

  // Same as the constructor above, but the shape is generated by a function,
  // only if needed (shape cache miss).
  TsNode(OpKind op, OpList operands,
         const std::function<lazy_tensors::Shape()>& shape_fn,
         size_t num_outputs = 1, lazy_tensors::hash_t hash_seed = 0x5a2d296e9);

  // The shape is set later.
  TsNode(OpKind op, OpList operands, size_t num_outputs = 1,
         lazy_tensors::hash_t hash_seed = 0x5a2d296e9);

  // Contructor used to create leaf nodes.
  TsNode(OpKind op, lazy_tensors::Shape shape, size_t num_outputs,
         lazy_tensors::hash_t hash_seed);

  virtual ~TsNode() {}
};

}  // namespace ir
}  // namespace torch_lazy_tensors